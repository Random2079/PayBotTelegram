from aiogram.types import Message, ShippingOption, ShippingQuery, LabeledPrice, PreCheckoutQuery
from aiogram.types.message import ContentType
from aiogram import types 

from messages import MESSAGES
from config import PAYMENTS_TOKEN, item_url
from main import dp, bot

########### –¶–µ–Ω—ã –∏ –≤–∏–¥—ã –¥–æ—Å—Ç–∞–≤–æ–∫ 
PRICE_MICRO = [
    LabeledPrice(label='–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', amount=1000 *100),
]
PRICE_FIX_MICRO = [
    LabeledPrice(label='–ü–æ—á–∏–Ω–∫–∞ –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–æ–π –ø–µ—á–∏', amount=1000 *100),
]
PRICE_DIAGNOSTIC = [
    LabeledPrice(label='–í—ã–∑–æ–≤ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∏', amount= 500 * 100)
]

DELIVERY_SHIPPING_OPTION = ShippingOption(
    id='superspeed',
    title='–Ø–Ω–¥–µ–∫—Å –¥–æ—Å—Ç–∞–≤–∫–∞'
).add(LabeledPrice('–ë—ã—Å—Ç—Ä–æ –∏ –¥–µ—à–∏–≤–æ', 100*100))

POST_SHIPPING_OPTION = ShippingOption(
    id='post',
    title='–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏'
)

POST_SHIPPING_OPTION.add(LabeledPrice('–û –ø—Ä–∏–≤–µ—Ç –Ω–∞–ª–æ–≥–∏ –ù–î–§–õ 13%', 25*100))
POST_SHIPPING_OPTION.add(LabeledPrice('–•–µ + –Ω–∞ –ø–µ–Ω—Å–∏—é', 25*100))

PICKUP_SHIPPING_OPTION = ShippingOption(
    id='pickup',
    title='–°–∞–º–æ–≤—ã–≤–æ–∑'
)
PICKUP_SHIPPING_OPTION.add(LabeledPrice('–°–∞–º–æ–≤—ã–≤–æ–∑', 10*100))

###################

# –ö–Ω–æ–ø–∫–∏ –∏ Keyboard

Service = types.KeyboardButton('–£—Å–ª—É–≥–∏')
Company = types.KeyboardButton('–û –∫–æ–º–ø–∞–Ω–∏–∏')
Support = types.KeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∫–∞')

# –ö–Ω–æ–ø–∫–∏ service

back_button = types.KeyboardButton('–ù–∞–∑–∞–¥')
fix_microwife = types.KeyboardButton('–†–µ–º–æ–Ω—Ç –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∏')
diagnostic = types.KeyboardButton('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞')

###################

service = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3 )
service.add(fix_microwife,diagnostic,back_button)

# Menu

menu = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3 )
menu.add(Service,Company,Support)

###################

@dp.message_handler(commands=['start'])
async def start_cmd(message: Message):
    await message.answer(MESSAGES['start'],reply_markup = menu)

@dp.message_handler()
async def help_cmd(message: Message):
    if message.text == '–£—Å–ª—É–≥–∏':
        await message.answer(''' –° —á–µ–º –≤–∞–º –ø–æ–º–æ—á—å? ü§î
        –†–µ–º–æ–Ω—Ç –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∏?
        –ü–æ–∫—É–ø–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π –æ—Ç –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∏?
        –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∏? ''',reply_markup = service)
    elif message.text == '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞':
        await message.answer(''' –°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!!! ''')
        await bot.send_invoice(message.chat.id,
            title=MESSAGES['item_title'],
            description=MESSAGES['item_description'],
            provider_token=PAYMENTS_TOKEN,
            currency='rub',
            photo_url=fix_microwife,
            photo_height=512,
            photo_width=512,
            photo_size=512,
            need_email=True,
            need_phone_number=True,
            is_flexible=True,
            prices=PRICE_DIAGNOSTIC,
            start_parameter='example',
            payload='some_invoice')
    elif message.text == '–†–µ–º–æ–Ω—Ç –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∏':
        await message.answer(''' –°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!!! ''')
        await bot.send_invoice(message.chat.id,
            title=MESSAGES['item_title'],
            description=MESSAGES['item_description'],
            provider_token=PAYMENTS_TOKEN,
            currency='rub',
            photo_url=fix_microwife,
            photo_height=512,
            photo_width=512,
            photo_size=512,
            need_email=True,
            need_phone_number=True,
            is_flexible=True,
            prices=PRICE_FIX_MICRO,
            start_parameter='example',
            payload='some_invoice')
    elif message.text == '–ù–∞–∑–∞–¥':
        await message.answer('''–í–æ–∑—Ä–∞—â–∞—é –æ–±—Ä–∞—Ç–Ω–æ (‚úãü´•üëç)''',reply_markup=menu)
    elif message.text == '–û –∫–æ–º–ø–∞–Ω–∏–∏':
        await message.answer('–ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è "MicroWife"M')
    elif message.text == '–ü–æ–¥–¥–µ—Ä–∂–∫–∞':
        await message.answer('–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏–±—É–¥–µ—Ç —Å–∫–æ—Ä–æ')
    else:
        await message.answer('–ù–µ –≤–µ—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã! ü§¨')

@dp.message_handler(commands=['terms'])
async def terms_cmd(message: Message):
    await message.answer(MESSAGES['terms'])

@dp.message_handler(commands=['buy'])
async def buy_process(message: Message):
    await bot.send_invoice(message.chat.id,
                           title=MESSAGES['item_title'],
                           description=MESSAGES['item_description'],
                           provider_token=PAYMENTS_TOKEN,
                           currency='rub',
                           photo_url=item_url,
                           photo_height=512,
                           photo_width=512,
                           photo_size=512,
                           need_email=True,
                           need_phone_number=True,
                           is_flexible=True,
                           prices=PRICE_MICRO,
                           start_parameter='example',
                           payload='some_invoice')
    
@dp.shipping_query_handler(lambda q: True)
async def shipping_process(shipping_query: ShippingQuery):
    if shipping_query.shipping_address.country_code == 'AU':
        return await bot.answer_shipping_query(
            shipping_query.id,
            ok=False,
            error_message=MESSAGES['AU_error']
        )

    shipping_options = [DELIVERY_SHIPPING_OPTION]

    if shipping_query.shipping_address.country_code == 'RU':
        shipping_options.append(POST_SHIPPING_OPTION)

        if shipping_query.shipping_address.city == '–°—É—Ä–≥—É—Ç':
            shipping_options.append(PICKUP_SHIPPING_OPTION)

    await bot.answer_shipping_query(
        shipping_query.id,
        ok=True,
        shipping_options=shipping_options
    )

@dp.pre_checkout_query_handler(lambda q: True)
async def checkout_process(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    print("SUCCESSFUL PAYMENT:")
    payment_info = message.successful_payment.to_python()
    for k, v in payment_info.items():
        print(f"{k} = {v}")

    await bot.send_message(message.chat.id,
                           f"–ü–ª–∞—Ç—ë–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!!!")

    